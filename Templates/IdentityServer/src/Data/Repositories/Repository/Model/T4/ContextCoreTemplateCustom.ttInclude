<#+
public class ContextCoreTemplateCustom : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public string EntityNamespace { get; set; }
	public string MappingNamespace { get; set; }
	public string MappingPostFix { get; set; }
    public IDriver Driver {get; set; }
	public List<Table> Models { get; set; }
    private string contextNamespace;

    public override string TransformText()
	{
		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

<#+contextNamespace = ContextData.TransformFullnamespace(DataType.BaseNamespace).Replace("{DriverType}", Driver.ParentFolder).Replace("{DriverPrefix}", Driver.Prefix);#>

using System.ComponentModel.DataAnnotations.Schema;
<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace.Replace("{DriverType}", "EFCore") #>;
<#+ } #>
<#+ foreach(var nameSpace in DataType.AdditionalNamespaces){ #>
using <#= nameSpace.Replace("{DriverType}", "EFCore") #>;
<#+ } #>
using <#= EntityNamespace #>;
using System;

namespace <#= contextNamespace #>.Context
{
<#+ if(!string.IsNullOrEmpty(Driver.ContextAttribute)){ #>
    <#=Driver.ContextAttribute #>
<#+ } #>
	public partial class <#= string.Concat(Driver.Prefix, ContextData.ContextName) #> 
	{	
        #region Public Methods And Operators

        /// <summary>
        /// The seed.
        /// </summary>
        /// <param name="modelBuilder">
        /// The model builder.
        /// </param>
        public void Seed(ModelBuilder modelBuilder)
        {

        }

        #endregion		
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
