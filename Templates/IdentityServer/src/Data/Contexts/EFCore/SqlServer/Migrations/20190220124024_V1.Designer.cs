// <auto-generated />
using System;
using DotNetScaffolder.Domain.Data.Contexts.EFCore.SqlServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DotNetScaffolder.Domain.Data.Contexts.EFCore.SqlServer.Migrations
{
    [DbContext(typeof(SqlServerFullContext))]
    [Migration("20190220124024_V1")]
    partial class V1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AllowedScope", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientId");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasColumnName("ResourceName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("AllowedScope","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            ResourceName = "openid"
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 1,
                            ResourceName = "profile"
                        },
                        new
                        {
                            Id = 3,
                            ClientId = 1,
                            ResourceName = "email"
                        },
                        new
                        {
                            Id = 4,
                            ClientId = 1,
                            ResourceName = "roles"
                        },
                        new
                        {
                            Id = 5,
                            ClientId = 1,
                            ResourceName = "api1"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.ApiResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnName("DisplayName")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ApiResource","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("Id");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnName("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRole","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaim","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUser", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnName("Id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("ConcurrencyStamp");

                    b.Property<string>("Email")
                        .HasColumnName("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnName("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnName("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnName("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("PasswordHash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasColumnName("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUser","dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2/20/2019 2:40:22 PM",
                            Email = "alice@alice.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "alice@alice.com",
                            NormalizedUserName = "alice",
                            PasswordHash = "password",
                            PhoneNumber = "123#",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "2/20/2019 2:40:22 PM",
                            TwoFactorEnabled = false,
                            UserName = "Alice"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnName("ClaimType");

                    b.Property<string>("ClaimValue")
                        .HasColumnName("ClaimValue");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaim","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "name",
                            ClaimValue = "Alice",
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9")
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "website",
                            ClaimValue = "https://alice.com",
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9")
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "email",
                            ClaimValue = "alice@alice.com",
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9")
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "role",
                            ClaimValue = "User",
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9")
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("ProviderDisplayName");

                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId")
                        .HasName("IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogin","dbo");

                    b.HasData(
                        new
                        {
                            LoginProvider = "IdentityServer4",
                            ProviderKey = "IdentityServer4",
                            ProviderDisplayName = "IdentityServer4",
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9")
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasName("IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRole","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("UserId");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnName("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserToken","dbo");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("953bb2c4-a127-4971-96bb-5e50c381a0b9"),
                            LoginProvider = "IdentityServer4",
                            Name = "Alice",
                            Value = "Alice"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasColumnName("Active");

                    b.Property<bool>("AlwaysSendClientClaims")
                        .HasColumnName("AlwaysSendClientClaims");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnName("ClientId")
                        .HasMaxLength(100);

                    b.Property<string>("ClientName")
                        .IsRequired()
                        .HasColumnName("ClientName")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Client","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Active = true,
                            AlwaysSendClientClaims = true,
                            ClientId = "mvc",
                            ClientName = "MVC client"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.ClientGrantType", b =>
                {
                    b.Property<int>("ClientId")
                        .HasColumnName("ClientId");

                    b.Property<int>("GrantTypeId")
                        .HasColumnName("GrantTypeId");

                    b.HasKey("ClientId", "GrantTypeId");

                    b.HasIndex("GrantTypeId");

                    b.ToTable("ClientGrantType","dbo");

                    b.HasData(
                        new
                        {
                            ClientId = 1,
                            GrantTypeId = 5
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.GrantType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("GrantType","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ClientCredentials"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Code"
                        },
                        new
                        {
                            Id = 3,
                            Name = "CodeAndClientCredentials"
                        },
                        new
                        {
                            Id = 4,
                            Name = "DeviceFlow"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hybrid"
                        },
                        new
                        {
                            Id = 6,
                            Name = "HybridAndClientCredentials"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Implicit"
                        },
                        new
                        {
                            Id = 8,
                            Name = "ImplicitAndClientCredentials"
                        },
                        new
                        {
                            Id = 9,
                            Name = "ResourceOwnerPassword"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ResourceOwnerPasswordAndClientCredentials"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.IdentityResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("DisplayName")
                        .HasMaxLength(50);

                    b.Property<bool>("Emphasize")
                        .HasColumnName("Emphasize");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(50);

                    b.Property<bool>("Required")
                        .HasColumnName("Required");

                    b.Property<bool>("ShowInDiscoveryDocument")
                        .HasColumnName("ShowInDiscoveryDocument");

                    b.HasKey("Id");

                    b.ToTable("IdentityResource","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.IdentityResourceClaimType", b =>
                {
                    b.Property<int>("IdentityResourceId")
                        .HasColumnName("IdentityResourceId");

                    b.Property<int>("ResourceClaimTypeId")
                        .HasColumnName("ResourceClaimTypeId");

                    b.HasKey("IdentityResourceId", "ResourceClaimTypeId");

                    b.HasIndex("ResourceClaimTypeId");

                    b.ToTable("IdentityResourceClaimType","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.PostLogoutRedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnName("Id");

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientId");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnName("Uri")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("PostLogoutRedirectUri","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Uri = "http://localhost:5002/signout-callback-oidc"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.RedirectUri", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClientId")
                        .HasColumnName("ClientId");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnName("Uri")
                        .HasMaxLength(500);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("RedirectUri","dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            Uri = "http://localhost:5002/signin-oidc"
                        });
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.ResourceClaimType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ResourceClaimType","dbo");
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AllowedScope", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.Client", "Client")
                        .WithMany("AllowedScope")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetRoleClaim", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetRole", "AspNetRole")
                        .WithMany("AspNetRoleClaim")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserClaim", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserClaim")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserLogin", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserLogin")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserRole", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetRole", "AspNetRole")
                        .WithMany("AspNetUserRole")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserRole")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUserToken", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserToken")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.ClientGrantType", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.Client", "Client")
                        .WithMany("ClientGrantType")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.GrantType", "GrantType")
                        .WithMany("ClientGrantType")
                        .HasForeignKey("GrantTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.IdentityResourceClaimType", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.IdentityResource", "IdentityResource")
                        .WithMany("IdentityResourceClaimType")
                        .HasForeignKey("IdentityResourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.ResourceClaimType", "ResourceClaimType")
                        .WithMany("IdentityResourceClaimType")
                        .HasForeignKey("ResourceClaimTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.PostLogoutRedirectUri", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.Client", "Client")
                        .WithMany("PostLogoutRedirectUri")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.RedirectUri", b =>
                {
                    b.HasOne("DotNetScaffolder.Domain.Data.Entities.DefaultEntity.Entity.Client", "Client")
                        .WithMany("RedirectUri")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
