<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers.NHibernate.Cache" #>
<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers.EFCore.Cache" #>
<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers" #>

<#+
public class DatabaseManagerTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public IDriver Driver { get; set; }

	public override string TransformText()
	{
		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************
<#+ foreach(var nameSpace in DataType.AdditionalNamespaces){ #>
using <#= nameSpace.Replace("{DriverType}", Driver.ParentFolder ) #>;
<#+ } #>
<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace #>;
<#+ } #>
using <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>.<#= Driver.ParentFolder #>;
using System;
using System.Collections.Generic;

namespace <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>.<#= Driver.Prefix #>.<#= Driver.ParentFolder #>.Database
{
	public class DatabaseManager : IDatabaseManager
	{	
		private IDictionary<string, string> configuration;
		
		#region CTOR
		
		public DatabaseManager(IDictionary<string, string> configuration)
		{
			this.configuration = configuration;
		}
		
		#endregion
		
        /// <summary>
        /// The begin unit of work.
        /// </summary>
        /// <returns>
        /// The <see cref="IUnitOfWork"/>.
        /// </returns>
        public virtual IUnitOfWork BeginUnitOfWork()
        {
            if (this.configuration == null || !this.configuration.ContainsKey("QUIRC<#= Driver.Prefix #>"))
            {
                throw new Exception("Invalid configuration specified in database manager");
            }
<#+            var cacheParameters = new CacheParameters { ConnectionName = $"QUIRC{Driver.Prefix}", ContextName = ContextData.ContextName, Driver = Driver}; #>
            <#= Driver.DriverType.GenerateBeginUnitOfWork(cacheParameters) #>
            // End
        }
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
