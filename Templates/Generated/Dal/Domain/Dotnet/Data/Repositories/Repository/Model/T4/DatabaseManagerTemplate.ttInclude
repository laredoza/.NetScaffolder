<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers.NHibernate.Cache" #>
<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers.EFCore.Cache" #>
<#@ import namespace="DotNetScaffolder.Components.Drivers.DefaultDrivers" #>

<#+
public class DatabaseManagerTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public IDriver Driver { get; set; }

	public override string TransformText()
	{
		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************
<#+ foreach(var nameSpace in DataType.AdditionalNamespaces){ #>
using <#= nameSpace.Replace("{DriverType}", Driver.ParentFolder ) #>;
<#+ } #>
<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace #>;
<#+ } #>
using <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>.<#= Driver.ParentFolder #>;
using System;
using System.Collections.Generic;
using StructureMap;
using StructureMap.Pipeline;
using RepositoryEFDotnet.Contexts.<#= Driver.ParentFolder #>.Base;

namespace <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>.<#= Driver.ParentFolder #>.<#= Driver.Prefix #>.Database
{
	public class DatabaseManager : IDatabaseManager
	{	
<#+ if(Driver.DriverType.EnableCache) {#>
    <#+ if(Driver.DriverType is NhibernateDriverType) {#>
    private static NHibernate.Cfg.Configuration Configuration;
	    private static ISessionFactory Factory;  
    <#+ } else if(Driver.DriverType is EFCoreDriverType) {#>
    protected static IServiceProvider Provider;
    <#+                } else if(Driver.DriverType is EFDriverType) {#>
			// Please setup EF  
    <#+ } #>
<#+ } else {#>
    <#+ if(Driver.DriverType is NhibernateDriverType) {#>
 	private static FluentConfiguration Configuration;
	    private static ISessionFactory Factory;   
    <#+  } else if(Driver.DriverType is EFCoreDriverType) {#>

    <#+  } else if(Driver.DriverType is EFDriverType) {#>
     // Please setup EF
    <#+ } #>            
<#+ } #>

		#region CTOR
		
		public DatabaseManager()
		{
		}
		
		#endregion
		
        /// <summary>
	    /// The register unit of work.
	    /// </summary>
	    /// <param name="configuration">
	    /// The configuration.
	    /// </param>
	    /// <param name="container">
	    /// The container.
	    /// </param>
	    /// <param name="serviceProvider">
	    /// The service provider.
	    /// </param>
	    /// <exception cref="Exception">
	    /// </exception>
	    public void RegisterUnitOfWork(
	        IDataConfiguration configuration,
	        IContainer container,
	        IServiceProvider serviceProvider = null)
	    {
	        if (configuration == null || configuration.ConnectionStrings == null
	                                  || !configuration.ConnectionStrings.ContainsKey("<#= $"{ContextData.CustomConnectionName}{Driver.Prefix}" #>"))
	        {
	            throw new Exception("Invalid configuration specified in database manager");
	        }

<#+            var cacheParameters = new CacheParameters { ConnectionName = $"{ContextData.CustomConnectionName}{Driver.Prefix}", ContextName = ContextData.ContextName, Driver = Driver}; #>
            <#= Driver.DriverType.GenerateBeginUnitOfWork(cacheParameters) #>
            // End
	    }
        
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
