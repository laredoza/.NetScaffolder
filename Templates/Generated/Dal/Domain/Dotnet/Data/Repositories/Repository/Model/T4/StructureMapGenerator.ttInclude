<#@ include file="StructureMapApplicationServiceRegistrationTemplate.ttInclude" #>
<#@ include file="StructureMapRepositoryRegistrationTemplate.ttInclude" #>
<#@ include file="StructureDatabaseManagerTemplate.ttInclude" #>

<#+
    public class StructureMapGenerator : BaseGenerator
    {
        public StructureMapDataType DataType { get; set; }
        public ApplicationServiceDataType ApplicationServiceDataType {get;set;}

        public List<Table> Models { get; set; }
        public RepositoryDataType RepositoryDataType { get; set; }
        public RepoInterfaceDataType RepoInterfaceDataType { get; set; }

        public ContextDataType ContextDataType { get; set; }
        public List<IDriver> Drivers {get;set;}
        public ContextData ContextData {get;set;}

        protected override void RunCore()
        {
            StructureMapApplicationServiceRegistrationTemplate applicationServiceTemplate = new StructureMapApplicationServiceRegistrationTemplate();
            applicationServiceTemplate.DataType = ApplicationServiceDataType;

            if(!string.IsNullOrEmpty(ApplicationServiceDataType.ApplicationServiceData.First().OutputPath))
            {
                applicationServiceTemplate.Output.Project = ApplicationServiceDataType.ApplicationServiceData.First().OutputPath;
            }

            applicationServiceTemplate.RenderToFile(@"Register\ApplicationServiceRegistration.g.cs");
 
            var repositoryRegistrationTemplate = new StructureMapRepositoryRegistrationTemplate();
			
            repositoryRegistrationTemplate.DataType = RepositoryDataType;
            repositoryRegistrationTemplate.Models = Models;
            repositoryRegistrationTemplate.RepoInterfaceDataType = RepoInterfaceDataType;

            if(!string.IsNullOrEmpty(RepositoryDataType.OutputPath))
            {
                repositoryRegistrationTemplate.Output.Project = RepositoryDataType.OutputPath;
            }

            repositoryRegistrationTemplate.RenderToFile(string.Format(@"{0}\{1}.g.cs", "Register", "RepositoryRegistration"));


            StructureDatabaseManagerTemplate structureDatabaseManagerTemplate = new StructureDatabaseManagerTemplate();

            foreach(IDriver driver in Drivers )
			{
				//Debugger.Break();
				
				string projectPath = string.Format(ContextData.OutputPath, driver.ParentFolder, driver.Prefix);
				
				if(!string.IsNullOrEmpty(projectPath))
				{
					structureDatabaseManagerTemplate.Output.Project =  projectPath;
				}

                structureDatabaseManagerTemplate.DataType = ContextDataType;
				structureDatabaseManagerTemplate.ContextData = ContextData;
                structureDatabaseManagerTemplate.Driver = driver;
				structureDatabaseManagerTemplate.RenderToFile(string.Format(@"{0}\{1}.g.cs", "Database", "DatabaseManager"));
			}

        }
    }
#>
