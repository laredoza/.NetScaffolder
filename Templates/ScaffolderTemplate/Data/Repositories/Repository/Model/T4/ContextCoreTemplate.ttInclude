<#+
public class ContextCoreTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public string EntityNamespace { get; set; }
	public string MappingNamespace { get; set; }
	public string MappingPostFix { get; set; }
    public IDriver Driver {get; set; }
	public List<Table> Models { get; set; }
    private string contextNamespace;

	public override string TransformText()
	{
		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

<#+contextNamespace = ContextData.TransformFullnamespace(DataType.BaseNamespace).Replace("{DriverType}", Driver.ParentFolder).Replace("{DriverPrefix}", Driver.Prefix);#>
using System.ComponentModel.DataAnnotations.Schema;
<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace.Replace("{DriverType}", "EFCore") #>;
<#+ } #>
<#+ foreach(var nameSpace in DataType.AdditionalNamespaces){ #>
using <#= nameSpace.Replace("{DriverType}", "EFCore") #>;
<#+ } #>
using <#= contextNamespace #>.Mappings.<#= string.Concat(Driver.Prefix, ContextData.ContextName) #>;
using <#= EntityNamespace #>;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;


namespace <#= contextNamespace #>.Context
{
<#+ if(!string.IsNullOrEmpty(Driver.ContextAttribute)){ #>
    <#=Driver.ContextAttribute #>
<#+ } #>
	public partial class <#= string.Concat(Driver.Prefix, ContextData.ContextName) #> <#= ContextData.TransformInheritFrom #>
	{	
		#region CTOR

	    public <#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>(string connectionString, IServiceProvider provider = null)
	        : base(connectionString, provider)
	    {
	    }

	    public <#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>(DbContextOptions<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>> options, IServiceProvider provider = null) 
			: base(options, provider) 
		{
		}
		
		#endregion
		
	    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	    {
	        if (!string.IsNullOrEmpty(ConnectionString) && !optionsBuilder.IsConfigured)
	        {
                <#= Driver.InitContext() #>
	        }
	    }
		
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
			
			#region Mappings
			
<#+ foreach(var table in this.Models){ #>
			modelBuilder.ApplyConfiguration(new <#= string.Concat(ContextData.ContextName,DataType.TransformModelName(table.TableName), MappingPostFix) #>());
<#+ } #>

			#endregion
			
			#region Excluded Relationships
			
			// Exclude entities not part of this context
			
<#+ foreach(var rel in ContextData.ExcludedRelationships(Models)){ #>
			modelBuilder.Ignore<<#= DataType.TransformModelName(rel.ReferencedTableName) #>>();
<#+ } #>

			#endregion
			
			this.Seed(modelBuilder);
        }
		
		#region Db Sets
		
<#+ foreach(var table in Models){ #>
		public virtual DbSet<<#= DataType.TransformModelName(table.TableName) #>> <#=DataType.TransformModelName(table.TableName) #> { get; set; }
<#+ } #>

		#endregion
		
		#region Setup
        
		protected override void SetupContext()
        {
            //Configuration.LazyLoadingEnabled = <#= Driver.DriverType.LazyLoadingEnabled.ToString().ToLower() #>;
            //Configuration.ProxyCreationEnabled = <#= Driver.DriverType.ProxyCreationEnabled.ToString().ToLower() #>;
            //Configuration.AutoDetectChangesEnabled = false;
			
<#+ if(Driver.DriverType.CreateDb){ #>
			//Database.SetInitializer(new CreateDatabaseIfNotExists<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>>());
			// Database.SetInitializer(new MigrateDatabaseToLatestVersion<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>, Configuration>());
<#+ } #>
<#+ if(Driver.DriverType.LoggingEnabled){ #>
			//Database.Log = this.Log;
<#+ } #>
        }
		
		#endregion

        #region Bulk
        
        /// <summary>
        /// Bulk delete
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        public override void BulkDelete<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkDelete() #>
        }

        /// <summary>
        /// Bulk delete async
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        /// <returns></returns>
        public async override Task BulkDeleteAsync<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkDeleteAsync() #>
        }

        /// <summary>
        /// Bulk insert
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        public override void BulkInsert<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkInsert() #>
        }

        /// <summary>
        /// Bulk insert async
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        /// <returns></returns>
        public async override Task BulkInsertAsync<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkInsertAsync() #>
        }

        /// <summary>
        /// Bulk update
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        public override void BulkUpdate<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkUpdate() #>
        }

        /// <summary>
        /// Bulk update async
        /// </summary>
        /// <typeparam name="TEntity"></typeparam>
        /// <param name="items"></param>
        /// <returns></returns>
        public override async Task BulkUpdateAsync<TEntity>(IEnumerable<TEntity> items)
        {
            <#= Driver.GenerateBulkUpdateAsync() #>
        }

        #endregion

	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
