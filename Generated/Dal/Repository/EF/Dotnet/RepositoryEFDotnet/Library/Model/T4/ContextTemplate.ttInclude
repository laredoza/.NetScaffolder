<#+
public class ContextTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public string EntityNamespace { get; set; }
	
	public override string TransformText()
	{
		Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

using System.Data.Entity;
using RepositoryEFDotnet.Library;
using System.ComponentModel.DataAnnotations.Schema;
using <#= EntityNamespace #>;

namespace <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>
{
	public partial class <#= ContextData.ContextName #> <#= ContextData.TransformInheritFrom #>
	{	
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
			
			#region Primary keys
			
<#+ foreach(var table in ContextData.Models){ #>
<#+ if(table.PrimaryKeyCount == 1){ var pk = table.Columns.First(o => o.IsPrimaryKey);#>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().HasKey(t => t.<#= pk.ColumnName #>);
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().Property(t => t.<#= pk.ColumnName #>).HasDatabaseGeneratedOption(DatabaseGeneratedOption.None);
<#+ } #>
<#+ if(table.PrimaryKeyCount > 1){ #>
<#+ 

var cols = table.Columns.Where(o => o.IsPrimaryKey);  
var pks = string.Empty;
foreach(var col in cols)
{
	pks += col.ColumnName + ",";
}

pks.TrimEnd(',');
#>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().HasKey(t => t.<#= pks #>);
<#+  #>
<#+ } #>
<#+ } #>

			#endregion
			
			#region Relationships
			
<#+ foreach(var table in ContextData.Models){ #>
<#+ foreach(var col in table.DistinctChildRelationships){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().HasRequired(t => t.<#= col.TableName #>).WithMany(t => t.<#= col.TableName #>);
<#+ } #>
<#+ } #>
			
			#endregion
        }
		
		#region Db Sets
		
<#+ foreach(var table in ContextData.Models){ #>
		public virtual DbSet<<#= DataType.TransformModelName(table.TableName) #>> <#=DataType.TransformModelName(table.TableName) #> { get; set; }
<#+ } #>

		#endregion
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
