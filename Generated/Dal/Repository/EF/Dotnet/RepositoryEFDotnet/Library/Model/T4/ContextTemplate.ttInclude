<#+
public class ContextTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public string EntityNamespace { get; set; }
	
	public override string TransformText()
	{
		Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

using System.Data.Entity;
using RepositoryEFDotnet.Library;
using System.ComponentModel.DataAnnotations.Schema;
using <#= EntityNamespace #>;

namespace <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>
{
	public partial class <#= ContextData.ContextName #> <#= ContextData.TransformInheritFrom #>
	{	
		#region CTOR
		
		public <#= ContextData.ContextName #>(string connectionOrName) 
			: base($"name={connectionOrName}") 
		{
		}
		
		public <#= ContextData.ContextName #>()
<#+ if(!string.IsNullOrEmpty(ContextData.CustomConnectionName)){ #>
			: base("name=<#= ContextData.CustomConnectionName #>") 
<#+ } else #>
<#+ { #>
			: base() 
<#+ } #>
		{
		}
		
		#endregion
		
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
			
			#region Tables
			
<#+ foreach(var table in ContextData.Models){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().ToTable("<#=table.TableName #>", "<#=table.SchemaName #>");
<#+ } #>

			#endregion
			
			#region Primary keys
			
<#+ foreach(var table in ContextData.Models){ #>
<#+ if(table.PrimaryKeyCount == 1){ var pk = table.Columns.First(o => o.IsPrimaryKey);#>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().HasKey(t => t.<#= pk.ColumnName #>);
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().Property(t => t.<#= pk.ColumnName #>).HasDatabaseGeneratedOption(<#=table.TransformDatabaseGeneratedKeyType #>);
<#+ } #>
<#+ if(table.PrimaryKeyCount > 1){ #>
<#+ 

var cols = table.Columns.Where(o => o.IsPrimaryKey);  
var pks = string.Empty;
foreach(var col in cols)
{
	pks += col.ColumnName + ",";
}

pks.TrimEnd(',');
#>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().HasKey(t => t.<#= pks #>);
<#+  #>
<#+ } #>
<#+ } #>

			#endregion
			
			#region Ignore
			
<#+ var ignoreList = new List<string>(); #>
<#+ foreach(var table in ContextData.Models){ #>
<#+ foreach(var rel in table.RelationShips){ #>
<#+ if(!ContextData.Models.Any(o=> o.TableName == rel.TableName) && !ignoreList.Contains(rel.TableName)){ ignoreList.Add(rel.TableName); #>
			modelBuilder.Ignore<<#= rel.TableName #>>();
<#+ } #>
<#+ } #>
<#+ } #>
<#+ #>

			#endregion
			
			#region Relationships
			
<#+ foreach(var table in ContextData.Models){ #>
<#+ foreach(var rel in table.DistinctChildRelationships){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(rel.TableName) #>>().HasRequired<<#= table.TableName #>>(s => s.<#= table.TableName #>).WithMany(s => s.<#= rel.TableNamePlural #>).HasForeignKey(s => s.<#= rel.ForeignColumnName #>).WillCascadeOnDelete(false);
<#+ } #>
<#+ } #>
			
			#endregion
			
			#region Constraints
			
<#+ foreach(var table in ContextData.Models){ #>
<#+ foreach(var col in table.Columns){ #>
<#+ if(col.Length > 0){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().Property(t => t.<#= col.ColumnName #>).HasMaxLength(<#= col.Length #>);
<#+ } #>
<#+ if(col.IsRequired){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().Property(t => t.<#= col.ColumnName #>).IsRequired();
<#+ } #>
<#+ if(col.Precision > 0 || col.Scale > 0){ #>
			modelBuilder.Entity<<#=DataType.TransformModelName(table.TableName) #>>().Property(t => t.<#= col.ColumnName #>).HasPrecision(<#= col.Precision #>, <#= col.Scale #>);
<#+ } #>
<#+ } #>
<#+ } #>
			
			#endregion
        }
		
		#region Db Sets
		
<#+ foreach(var table in ContextData.Models){ #>
		public virtual DbSet<<#= DataType.TransformModelName(table.TableName) #>> <#=DataType.TransformModelName(table.TableName) #> { get; set; }
<#+ } #>

		#endregion
		
		#region Setup
        
		protected override void SetupContext()
        {
            Configuration.LazyLoadingEnabled = false;
            Configuration.ProxyCreationEnabled = false;
            Configuration.AutoDetectChangesEnabled = false;
<#+ if(ContextData.CreateDb){ #>
			Database.SetInitializer(new CreateDatabaseIfNotExists<<#= ContextData.ContextName #>>());
<#+ } #>
<#+ if(ContextData.LoggingEnabled){ #>
			Database.Log = this.Log;
<#+ } #>
        }
		
		#endregion
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
