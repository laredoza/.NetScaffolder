<#+
public class EntityTemplate : BaseTemplate 
{
	public EntityDataType DataType { get; set; }
	public string DtoInterfaceNamespace { get; set; }
	
	public override string TransformText()
	{
		// Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = DataType.EntityName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

using System;
using System.Collections.Generic;
using <#= DtoInterfaceNamespace #>;

namespace <#= DataType.FullNamespace #>
{
	public partial class <#= DataType.EntityName #> <#= DataType.TransformInheritFrom #> 
	{
<#+ if(DataType.AddInjectConstructor){ #>
		#region CTOR
		
		public <#= DataType.EntityName #>()
		{
<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity == RelationshipMultiplicity.Many)){ #>
			this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> = new <#= DataType.CollectionOption.ClassName #> <<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>>();
<#+ } #>
		}
		
		public <#= DataType.EntityName #>(I<#= DataType.EntityName #> item, bool deep = false)
		{
			if(item == null) return;
			
<#+ foreach(var col in DataType.MetaData.Columns){ #>
			this.<#= DataType.NamingConvention.ApplyNamingConvention(col.ColumnName) #> = item.<#= DataType.NamingConvention.ApplyNamingConvention(col.ColumnName) #>;
<#+ } #>

<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity == RelationshipMultiplicity.Many)){ #>
			this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> = new <#= DataType.CollectionOption.ClassName #> <<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>>();
<#+ } #>

			if(deep)
			{
<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity == RelationshipMultiplicity.Many)){ #>
				if(item.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> != null)
				{
					foreach(var childItem in item.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #>)
					{
						this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #>.Add(new <#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>(childItem, deep));
					}
				}
<#+ } #>
<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity != RelationshipMultiplicity.Many)){ #>
				this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> = new <#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>(item.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #>, deep);
<#+ } #>
<#+ foreach(var parent in DataType.MetaData.DistinctParentRelationships){ #>
				if(item.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #> != null)
                {
                    this.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #> = new <#= DataType.NamingConvention.ApplyNamingConvention(parent.ReferencedTableName) #>(item.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #>, deep);
                }
<#+ } #>
			}
		}
		
		#endregion
		
<#+ } #>
		#region Fields
		
<#+ foreach(var col in DataType.MetaData.Columns){ #>
		public <#= CSharpOutputMapper.MapToOutput(col) #> <#= DataType.NamingConvention.ApplyNamingConvention(col.ColumnName) #> { get; set; }
<#+ } #>

		#endregion
		
		#region Child Relationships
<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity == RelationshipMultiplicity.Many)){ #>
        
        public virtual <#= DataType.CollectionOption.ClassNameInterface #><<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>> <#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> { get; set; }

        <#= DataType.CollectionOption.ClassNameInterface #><I<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>> I<#= DataType.EntityName #>.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> 
		{ 
			get
			{
				return (<#= DataType.CollectionOption.ClassNameInterface #><I<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>>)this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #>;
			}
			set
			{
				this.<#= RelationshipNameFormatting.FormatReferencedPropertyName(child, DataType.NamingConvention, DataType.MetaData.DistinctChildRelationships) #> = (<#= DataType.CollectionOption.ClassNameInterface #><<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>>)value;
			}			
		}
<#+ } #>

<#+ foreach(var child in DataType.MetaData.DistinctChildRelationships.Where(o => o.ReferencedMultiplicity != RelationshipMultiplicity.Many)){ #>
        
        public virtual <#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #> <#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #> { get; set; }

		I<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #> I<#= DataType.EntityName #>.<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #> 
		{ 
			get
			{
				return this.<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>;
			}
			set
			{
				this.<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #> = (<#= DataType.NamingConvention.ApplyNamingConvention(child.ReferencedTableName) #>)value;
			}
		}
<#+ } #>
		
		#endregion
		
		#region Parent Relationships
<#+ foreach(var parent in DataType.MetaData.DistinctParentRelationships){ #>

        public virtual <#= DataType.NamingConvention.ApplyNamingConvention(parent.ReferencedTableName) #> <#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #> { get; set; }

		I<#= DataType.NamingConvention.ApplyNamingConvention(parent.ReferencedTableName) #> I<#= DataType.EntityName #>.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #> 
		{ 
			get
			{
				return this.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #>;
			}
			set
			{
				this.<#= RelationshipNameFormatting.FormatParentPropertyName(parent, DataType.NamingConvention, DataType.MetaData.DistinctParentRelationships) #> = (<#= DataType.NamingConvention.ApplyNamingConvention(parent.ReferencedTableName) #>)value;
			}
		}
<#+ } #>
		
		#endregion
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
