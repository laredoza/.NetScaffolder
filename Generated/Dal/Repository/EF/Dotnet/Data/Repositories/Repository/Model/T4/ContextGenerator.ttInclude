<#@ include file="ContextTemplate.ttinclude" #>
<#@ include file="ContextCoreTemplate.ttinclude" #>
<#+
    public class ContextGenerator : BaseGenerator
    {
        public ContextDataType DataType {get;set;}
        public EntityDataType EntityDataType {get;set;}
		public List<Table> Models { get; set; }
		public string MappingNamespace { get; set;}
		public string MappingPostFix { get; set; }

        protected override void RunCore()
        {
            foreach(var dbContext in DataType.Contexts)
            {                
                foreach(IDriver driver in DataType.Drivers )
                {
					Debugger.Break();
					
					if(driver.DriverType is EFDriverType)
					{
						GenerateEFContext(driver, dbContext);
					}
					else if(driver.DriverType is EFCoreDriverType)
					{
						GenerateEFCoreContext(driver, dbContext);
					}
                }
            }
        }
		
		private void GenerateEFContext(IDriver driver, ContextData contextData)
		{	
			var contextModels = Models.Where(o => contextData.Models.Exists(x => x.SchemaName == o.SchemaName && x.TableName == o.TableName)).ToList();
		
			var template = new ContextTemplate();
		    template.DataType = DataType;
            template.EntityNamespace = EntityDataType.FullNamespace;
			template.ContextData = contextData;
			template.Driver = driver;
			template.MappingNamespace = MappingNamespace;
			template.MappingPostFix = MappingPostFix;
			template.Models = contextModels;

			if(!string.IsNullOrEmpty(contextData.OutputPath))
			{
				template.Output.Project =  string.Format(contextData.OutputPath, driver.ParentFolder, driver.Prefix);
			}

			template.RenderToFile(string.Format(@"{0}\{1}{2}.g.cs", contextData.OutputFolder,driver.Prefix,contextData.ContextName));
		}
		
		private void GenerateEFCoreContext(IDriver driver, ContextData contextData)
		{	
			var contextModels = Models.Where(o => contextData.Models.Exists(x => x.SchemaName == o.SchemaName && x.TableName == o.TableName)).ToList();
			
			var template = new ContextCoreTemplate();
		    template.DataType = DataType;
            template.EntityNamespace = EntityDataType.FullNamespace;
			template.ContextData = contextData;
			template.Driver = driver;
			template.MappingNamespace = MappingNamespace;
			template.MappingPostFix = MappingPostFix;
			template.Models = contextModels;

			if(!string.IsNullOrEmpty(contextData.OutputPath))
			{
				template.Output.Project =  string.Format(contextData.OutputPath, driver.ParentFolder, driver.Prefix);
			}

			template.RenderToFile(string.Format(@"{0}\{1}{2}.g.cs", contextData.OutputFolder,driver.Prefix,contextData.ContextName));
		}
    }
#>
