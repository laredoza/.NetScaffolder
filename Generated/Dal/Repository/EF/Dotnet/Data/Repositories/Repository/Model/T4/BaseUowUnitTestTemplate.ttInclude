<#+
public class BaseUowUnitTestTemplate : BaseTemplate 
{
    public List<Table> Models { get; set; }
	
	public override string TransformText()
	{
		// Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = "BaseUnitOfWorkUnitTest.g.cs";
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

using Banking.Models.Entity;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using RepositoryEFDotnet.Library;
using System.Data.Entity;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RepositoryEFDotnet.UnitTest
{
	[TestClass]
	public abstract partial class BaseUnitOfWorkUnitTests<TUow> : BaseUnitTest where TUow : IUnitOfWork
	{
        #region Fields

        protected static TUow Uow;

        #endregion

		#region Tests
		
<#+ foreach(var mdl in Models.Where(o => o.TableName.Equals("BankAccount"))){ 
		var pk = mdl.Columns.First(o => o.IsPrimaryKey);
#>

        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Add()
        {
            var entity = new <#= mdl.TableName #>();
            Populate<#= mdl.TableName #>(entity, false, 1);

            Uow.Add(entity);
            Uow.Commit();

            var entities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(1, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
            Check_<#= mdl.TableName #>(entity, entities.FirstOrDefault());
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddAsync()
        {
            var entity = new <#= mdl.TableName #>();
            Populate<#= mdl.TableName #>(entity, false, 1);

            await Uow.AddAsync(entity);
            await Uow.CommitAsync();

            var entities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(1, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
            Check_<#= mdl.TableName #>(entity, entities.FirstOrDefault());
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Modify()
        {
			int id = 1;
            var entityToUpdate = Uow.FirstOrDefault<<#= mdl.TableName #>>(o => o.<#= pk.ColumnName #> == id);
			Assert.IsNotNull(entityToUpdate, $"<#= mdl.TableName #> could not be found for <#= pk.ColumnName #> = {id}");
            Populate<#= mdl.TableName #>(entityToUpdate, true);

            Uow.Modify(entityToUpdate);
            Uow.Commit();

            var entities = Uow.AllMatching<<#= mdl.TableName #>>(o => o.<#= pk.ColumnName #> == id);
            Check_EntityCount(1, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
            Check_<#= mdl.TableName #>(entityToUpdate, entities.FirstOrDefault());
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_ModifyAsync()
        {
            var entity = new <#= mdl.TableName #>();
            Populate<#= mdl.TableName #>(entity, true);

            await Uow.ModifyAsync(entity);
            await Uow.CommitAsync();

            var entities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(1, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
            Check_<#= mdl.TableName #>(entity, entities.FirstOrDefault());
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Remove()
        {
			BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Add();
			
            var entity = Uow.FirstOrDefault<<#= mdl.TableName #>>();
			
			Assert.IsNotNull(entity, "<#= mdl.TableName #> not found to remove");
			
            Uow.Remove(entity);
            Uow.Commit();

            var entities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(0, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_RemoveAsync()
        {
			await BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddAsync();
			
            var entity = Uow.FirstOrDefault<<#= mdl.TableName #>>();
			
			Assert.IsNotNull(entity, "<#= mdl.TableName #> not found to remove");
			
            await Uow.RemoveAsync(entity);
            await Uow.CommitAsync();

            var entities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(0, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_RemoveRange()
        {
			BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddRange();
			
            var entitiesToRemove = Uow.GetAll<<#= mdl.TableName #>>();
			
            Uow.RemoveRange(entitiesToRemove);
            Uow.Commit();

            var removedEntities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(0, removedEntities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_RemoveRangeAsync()
        {
			await BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddRangeAsync();
			
            var entitiesToRemove = await Uow.GetAllAsync<<#= mdl.TableName #>>();
			
            await Uow.RemoveRangeAsync(entitiesToRemove);
            await Uow.CommitAsync();

            var removedEntities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(0, removedEntities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Rollback()
        {		
            var entity = new <#= mdl.TableName #>();
            Populate<#= mdl.TableName #>(entity);

            Uow.Add(entity);
            Uow.Rollback();
			Uow.Commit(); // Do a commit here to make sure rollback did what it was suppose to

            var entities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(0, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_RollbackAsync()
        {		
            var entity = new <#= mdl.TableName #>();
            Populate<#= mdl.TableName #>(entity);

            await Uow.AddAsync(entity);
            await Uow.RollbackAsync();
			await Uow.CommitAsync(); // Do a commit here to make sure rollback did what it was suppose to

            var entities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(0, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Any()
        {
			BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Add();

            bool hasAny = Uow.Any<<#= mdl.TableName #>>();
            Assert.IsTrue(hasAny, "Could not find any <#= mdl.TableName #>");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AnyAsync()
        {
			await BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddAsync();

            bool hasAny = await Uow.AnyAsync<<#= mdl.TableName #>>();
            Assert.IsTrue(hasAny, "Could not find any <#= mdl.TableName #>");
        }

        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Any_NothingFound()
        {
            bool hasAny = Uow.Any<<#= mdl.TableName #>>();
            Assert.IsFalse(hasAny, "Incorrectly found <#= mdl.TableName #>");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_FirstOrDefault()
        {
			BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Add();

            var entity = Uow.FirstOrDefault<<#= mdl.TableName #>>();
            Assert.IsNotNull(entity, "Could not find <#= mdl.TableName #>");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_FirstOrDefaultAsync()
        {
			await BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddAsync();

            var entity = await Uow.FirstOrDefaultAsync<<#= mdl.TableName #>>();
            Assert.IsNotNull(entity, "Could not find <#= mdl.TableName #>");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_FirstOrDefault_NothingFound()
        {
            var entity = Uow.FirstOrDefault<<#= mdl.TableName #>>();
            Assert.IsNull(entity, "Incorrectly found <#= mdl.TableName #>");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_FirstOrDefault_WithFilter()
        {
            var entity = Uow.FirstOrDefault<<#= mdl.TableName #>>(o=> o.<#= pk.ColumnName #> == 1);
            Assert.IsNotNull(entity, "Could not find <#= mdl.TableName #>");
            Assert.AreEqual(1, entity.<#= pk.ColumnName #>, "Incorrect <#= mdl.TableName #>.<#= pk.ColumnName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_GetAll()
        {
			BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddRange();

            var entities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(3, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Get()
        {
            var entity = Uow.Get<<#= mdl.TableName #>>(o=> o.<#= pk.ColumnName #> == 1);
            Assert.IsNotNull(entity, "Could not find <#= mdl.TableName #>");
            Assert.AreEqual(1, entity.<#= pk.ColumnName #>, "Incorrect <#= mdl.TableName #>.<#= pk.ColumnName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_Get_NothingFound()
        {
            var entity = Uow.Get<<#= mdl.TableName #>>(o=> o.<#= pk.ColumnName #> == 999999);
			Assert.IsNull(entity, "Incorrect <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_GetAsync()
        {
            var entity = await Uow.GetAsync<<#= mdl.TableName #>>(o=> o.<#= pk.ColumnName #> == 1);
            Assert.IsNotNull(entity, "Could not find <#= mdl.TableName #>");
            Assert.AreEqual(1, entity.<#= pk.ColumnName #>, "Incorrect <#= mdl.TableName #>.<#= pk.ColumnName #> found");
        }
		
        [TestMethod]
        public virtual async Task BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_GetAllAsync()
        {
			await BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_AddRangeAsync();

            var entities = await Uow.GetAllAsync<<#= mdl.TableName #>>();
            Check_EntityCount(3, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
		
        [TestMethod]
        public virtual void BaseUnitOfWorkUnitTests_<#= mdl.TableName #>_GetAll_NothingFound()
        {
            var entities = Uow.GetAll<<#= mdl.TableName #>>();
            Check_EntityCount(0, entities.Count(), "Incorrect number of <#= mdl.TableName #> found");
        }
<#+ } #>

		#endregion
		
        #region Cleanup

        [ClassCleanup]
        public void ClassCleanup()
        {
            Uow?.Dispose();
        }

        #endregion
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
