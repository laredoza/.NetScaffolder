<#+
public class MappingNHibernateTemplate : BaseTemplate 
{
	public string Namespace { get; set; }
	public string EntityNamespace { get; set; }
	public ContextData ContextData { get; set; } 
	public IDriver Driver { get; set; }
	public Table Model { get; set; }
	public List<Table> Models { get; set; }
	public INamingConvention NamingConvention { get; set; }
	public string PostFix { get; set; }

	public override string TransformText()
	{		
        string ModelName = NamingConvention == null ? Model.TableName : NamingConvention.ApplyNamingConvention(Model.TableName);

		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ModelName + PostFix;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************
using <#= EntityNamespace #>;
using FluentNHibernate.Mapping;

namespace <#= Namespace #>.<#= Driver.ParentFolder #>.<#= Driver.Prefix #>
{
	public partial class <#= ModelName #><#= PostFix #> : ClassMap<<#= ModelName #>>
	{	
		public <#= ModelName #><#= PostFix #> ()
		{
			CreateMapping();
		}
		
		protected virtual void CreateMapping()
		{
<#+
			var schemaName = Model.SchemaName;
			if (Driver.ForceSchemaToUppercase)
			{
				schemaName = schemaName.ToUpper();
			}
#>
			Table("<#= ModelName #>");
<#+ if(Driver.UseSchema){ #>
			Schema("<#= schemaName #>");
<#+ } #>
			
			#region Primary Keys
			
<#+ if(Model.PrimaryKeyCount == 1){ var pk = Model.Columns.First(o => o.IsPrimaryKey);#>
			Id(t => t.<#= pk.ColumnName #>)<#=Driver.DriverType.TransformDbGeneratedKey(Model) #>
<#+ foreach(var idx in Model.Indexes.Where(o => o.IndexType != IndexType.PrimaryKey && o.Columns.Contains(pk.ColumnName))){ #>
			<#=Driver.TransformIndex(idx) #>
<#+ } #>
<#+ if((pk.Precision > 0 && !pk.InValidPrecisionGeneration) || pk.Scale > 0){ #>
			<#= Driver.DriverType.TransformColumnPrecision(pk) #>
<#+ } #>
<#+ if(pk.Length > 0){ #>
			.Length(<#= pk.Length #>)
<#+ } #>
<#+ if(pk.IsRequired){ #>
			.Not.Nullable();
<#+ } else #>
<#+ { #>
			.Nullable();
<#+ } #>
<#+ if(Model.DatabaseGeneratedKeyType != DatabaseGeneratedKeyType.None && Model.DatabaseGeneratedKeyType != DatabaseGeneratedKeyType.Ignore) {#>
			Map(t => t.<#= pk.ColumnName #>).ReadOnly().Generated.Insert();
<#+ } #>
<#+ } #>
<#+ if(Model.PrimaryKeyCount > 1){ #>
			CompositeId()<#+ foreach(var col in Model.Columns.Where(o => o.IsPrimaryKey)){ #>.KeyProperty(t => t.<#= col.ColumnName #>)<#+ } #>;
<#+ } #>

			#endregion

			#region Properties
			
<#+ foreach(var col in Model.Columns.Where(o => !o.IsPrimaryKey)){ #>
			Map(t => t.<#= col.ColumnName #>)
<#+ foreach(var idx in Model.Indexes.Where(o => o.IndexType != IndexType.PrimaryKey && o.Columns.Contains(col.ColumnName))){ #>
			<#=Driver.TransformIndex(idx) #>
<#+ } #>
<#+ if((col.Precision > 0 && !col.InValidPrecisionGeneration) || col.Scale > 0){ #>
			<#= Driver.DriverType.TransformColumnPrecision(col) #>
<#+ } #>
<#+ if(col.Length > 0){ #>
			.Length(<#= col.Length #>)
<#+ } #>
<#+ if(col.IsRequired){ #>
			.Not.Nullable();
<#+ } else #>
<#+ { #>
			.Nullable();
<#+ } #>
<#+ } #>
			
			#endregion
			
			#region Relationships
			
<#+ foreach(var rel in Model.Relationships.Where(o => ContextData.HasModel(o))){ #>
			<#= Driver.DriverType.TransformRelationship(Model.TableName, rel, Models, Model.Relationships.Where(o => ContextData.HasModel(o)), NamingConvention) #>
<#+ } #>
			
			#endregion			
<#+ if(Driver.DriverType.IncludeColumnOrder){ #>

			#region Column Order
			
			// Not available in NHibernate at the moment

			#endregion
<#+ } #>	
		}
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
