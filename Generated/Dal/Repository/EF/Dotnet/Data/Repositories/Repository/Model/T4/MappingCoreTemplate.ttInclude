<#+
public class MappingCoreTemplate : BaseTemplate 
{
	public string Namespace { get; set; }
	public string EntityNamespace { get; set; }
	public ContextData ContextData { get; set; } 
	public IDriver Driver { get; set; }
	public Table Model { get; set; }
	public List<Table> Models { get; set; }
	public INamingConvention NamingConvention { get; set; }
	public string PostFix { get; set; }

	public override string TransformText()
	{		
        string ModelName = NamingConvention == null ? Model.TableName : NamingConvention.ApplyNamingConvention(Model.TableName);

		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ModelName + PostFix + ".g.cs";
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace #>;
<#+ } #>
using System.ComponentModel.DataAnnotations.Schema;
using <#= EntityNamespace #>;
using System.Data.Common;


namespace <#= Namespace #>.<#= Driver.ParentFolder #>.<#= Driver.Prefix #>
{
	public partial class <#= ModelName #><#= PostFix #> : IEntityTypeConfiguration<<#= ModelName #>>
	{	
	    public void Configure(EntityTypeBuilder<<#= ModelName #>> builder)
	    {
<#+
var schemaName = Model.SchemaName;
if (Driver.ForceSchemaToUppercase)
{
	schemaName = schemaName.ToUpper();
}
#>
<#+ if(Driver.UseSchema) { #>
			builder.ToTable("<#= Driver.AsAlias(Model.TableName) #>", "<#= Driver.AsAlias(schemaName) #>");
<#+ } else #>
<#+ {#>
			builder.ToTable("<#= Driver.AsAlias(Model.TableName) #>");
<#+ }#>
			
			#region Primary keys
			
<#+ if(Model.PrimaryKeyCount == 1){ var pk = Model.Columns.First(o => o.IsPrimaryKey);#>
			builder.HasKey(t => t.<#= pk.ColumnName #>);
			builder.Property(t => t.<#= pk.ColumnName #>)<#=Driver.DriverType.TransformDbGeneratedKey(Model) #>;
<#+ } #>
<#+ if(Model.PrimaryKeyCount > 1){ #>
			builder.HasKey(t => new {<#= Model.TransformCompositeKeys(Model.Columns.Where(o => o.IsPrimaryKey), "t") #>});
<#+ foreach(var col in Model.Columns.Where(o => o.IsPrimaryKey)){ #>
			builder.Property(t => t.<#= col.ColumnName #>)<#=Driver.DriverType.TransformDbGeneratedKey(Model) #>;
<#+ } #>
<#+ } #>

			#endregion

			#region Constraints
			
<#+ foreach(var col in Model.Columns){ #>
<#+ if(col.Length > 0){ #>
			builder.Property(t => t.<#= col.ColumnName #>).HasMaxLength(<#= col.Length #>);
<#+ } #>
<#+ if(col.IsRequired){ #>
			builder.Property(t => t.<#= col.ColumnName #>).IsRequired();
<#+ } else #>
<#+ { #>
			builder.Property(t => t.<#= col.ColumnName #>).IsRequired(false);
<#+ } #>
<#+ if((col.Precision > 0 && !col.InValidPrecisionGeneration) || col.Scale > 0){ #>
			builder.Property(t => t.<#= col.ColumnName #>)<#= Driver.DriverType.TransformColumnPrecision(col) #>;
<#+ } #>
<#+ } #>
			
			#endregion

			#region Relationships
			
<#+ foreach(var rel in Model.Relationships.Where(o => ContextData.HasModel(o))){ #>
			<#= Driver.DriverType.TransformRelationship(Model.TableName, rel, Models, Model.Relationships.Where(o => ContextData.HasModel(o)), NamingConvention) #>
<#+ } #>
			
			#endregion	
<#+ if(Driver.DriverType.IncludeColumnOrder){ #>
			#region Column Order
			
			// Column ordering available in EF Core 2.1 - https://data.uservoice.com/forums/72025-entity-framework-core-feature-suggestions/suggestions/18936844-ef-core-migrations-column-ordering
			// Waiting for that release before implementing
<#+ foreach(var col in Model.Columns){ #>
			//TODO: builder.Property(t => t.<#= col.ColumnName #>).HasColumnOrder(<#= col.ColumnOrder #>);
<#+ } #>

			#endregion	
<#+ } #>
	    }
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
