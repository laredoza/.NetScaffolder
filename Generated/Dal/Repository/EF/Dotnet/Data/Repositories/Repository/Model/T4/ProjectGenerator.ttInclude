<#@ include file="BaseProjectGenerator.ttInclude" #>
<#@ include file="ContextGenerator.ttInclude" #>
<#@ include file="EntityGenerator.ttInclude" #>
<#@ include file="DtoInterfaceGenerator.ttInclude" #>
<#@ include file="DtoGenerator.ttInclude" #>
<#@ include file="RepoInterfaceGenerator.ttInclude" #>
<#@ include file="RepositoryGenerator.ttInclude" #>
<#@ include file="MappingGenerator.ttInclude" #>
<#@ include file="BaseUnitTestGenerator.ttInclude" #>
<#+
    public class ProjectGenerator : BaseProjectGenerator
    {
        protected override void ExecuteGenerators(List<IDataType> dataTypes, DomainDefinition domain)
        {
            // Execute generation using initialised data types
            foreach(var dataType in dataTypes)
            {
                if(dataType is DtoInterfaceDataType)
                {
                    // Debugger.Break();
                    var iDtoGen = new DtoInterfaceGenerator();
                    iDtoGen.Models = domain.Tables;
                    iDtoGen.DataType = dataType as DtoInterfaceDataType;
                    iDtoGen.Run();
                }
			
                if(dataType is EntityDataType)
                {
                    // Debugger.Break();
                    var entityGen = new EntityGenerator();
                    entityGen.Models = domain.Tables;
                    entityGen.DataType = dataType as EntityDataType;
                    entityGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    entityGen.Run();
                }

                if(dataType is ContextDataType)
                {
                    Debugger.Break();
					
                    var contxtGen = new ContextGenerator();
					
					contxtGen.Models = domain.Tables;
                    contxtGen.DataType = dataType as ContextDataType;
                    contxtGen.EntityDataType = dataTypes.FirstOrDefault(o => o is EntityDataType) as EntityDataType;
					contxtGen.MappingNamespace = dataType.BaseNamespace + ".Mappings";
					contxtGen.MappingPostFix = new MappingGenerator().MappingPostFix;
                    contxtGen.Run();
					
					var mappingGen = new MappingGenerator();
					
					foreach(var contextData in contxtGen.DataType.Contexts)
					{					
						if(contextData != null)
						{
							mappingGen.Models = domain.Tables.Where(o => contextData.Models.Exists(x => x.SchemaName == o.SchemaName && x.TableName == o.TableName)).ToList();;
							mappingGen.Drivers = dataType.Drivers;
							mappingGen.ProjectOutputPath = contextData.OutputPath;
							mappingGen.EntityNamespace = contxtGen.EntityDataType.FullNamespace;
							mappingGen.MappingNamespace = dataType.BaseNamespace + ".Mappings";
							mappingGen.NamingConvention = dataType.NamingConvention;
							mappingGen.ContextData = contextData;
							mappingGen.Run();
						}
					}
                }
			
                if(dataType is RepoInterfaceDataType)
                {
                    var iRepoGen = new RepoInterfaceGenerator();
                    iRepoGen.Models = domain.Tables;
                    iRepoGen.DataType = dataType as RepoInterfaceDataType;
                    iRepoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iRepoGen.Run();
                }
			
                if(dataType is RepositoryDataType)
                {
                    var iRepoGen = new RepositoryGenerator();
                    iRepoGen.Models = domain.Tables;
                    iRepoGen.DataType = dataType as RepositoryDataType;
                    iRepoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iRepoGen.EntityDataType = dataTypes.FirstOrDefault(o => o is EntityDataType) as EntityDataType;
                    iRepoGen.Run();
                }
			
                if(dataType is DtoDataType)
                {
                    var iDtoGen = new DtoGenerator();
                    iDtoGen.Models = domain.Tables;
                    iDtoGen.DataType = dataType as DtoDataType;
                    iDtoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iDtoGen.Run();
                }
            }
			
			// Unit Test generation
			var unitTestGen = new BaseUnitTestGenerator();
			unitTestGen.Models = domain.Tables;
			unitTestGen.Run();
        }
}
    #>
