<#@ include file="BaseProjectGenerator.ttInclude" #>
<#@ include file="ContextGenerator.ttInclude" #>
<#@ include file="EntityGenerator.ttInclude" #>
<#@ include file="DtoInterfaceGenerator.ttInclude" #>
<#@ include file="DtoGenerator.ttInclude" #>
<#@ include file="RepoInterfaceGenerator.ttInclude" #>
<#@ include file="RepositoryGenerator.ttInclude" #>
<#@ include file="MappingGenerator.ttInclude" #>
<#@ include file="BaseUnitTestGenerator.ttInclude" #>
<#+
    public class ProjectGenerator : BaseProjectGenerator
    {
        protected override void ExecuteGenerators(List<IDataType> dataTypes, DomainDefinition domain)
        {
            // Execute generation using initialised data types
            foreach(var dataType in dataTypes)
            {              
                if(dataType is DtoInterfaceDataType)
                {
                    // Debugger.Break();
                    var iDtoGen = new DtoInterfaceGenerator();
                    iDtoGen.Models = domain.Tables;
                    iDtoGen.DataType = dataType as DtoInterfaceDataType;
                    iDtoGen.Run();
                }
			
                if(dataType is EntityDataType)
                {
                    // Debugger.Break();
                    var entityGen = new EntityGenerator();
                    entityGen.Models = domain.Tables;
                    entityGen.DataType = dataType as EntityDataType;
                    entityGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    entityGen.Run();
                }

                if(dataType is ContextDataType)
                {
					//dataType.AdditionalNamespaces.Add("Quirc.Data.Context.EFCore.Base");
					
					var contextDataType = dataType as ContextDataType;
					var entityDataType = dataTypes.FirstOrDefault(o => o is EntityDataType) as EntityDataType;
					
					foreach(var contextData in contextDataType.Contexts)
					{					
						if(contextData != null)
						{
							var mappingGen = new MappingGenerator();
							var mappingDataType = dataTypes.FirstOrDefault(o => o is MappingDataType) as MappingDataType;
					
							if(mappingDataType != null)
							{
								mappingGen.Models = domain.Tables;
								mappingGen.ProjectOutputPath = contextData.OutputPath;
								mappingGen.EntityNamespace = entityDataType.FullNamespace;
								mappingGen.ContextData = contextData;
								mappingGen.MappingDataType = mappingDataType;
								mappingGen.NamingConvention = dataType.NamingConvention;
								mappingGen.Run();
							}
							
							var contxtGen = new ContextGenerator();
							
							contxtGen.Models = domain.Tables;
							contxtGen.DataType = contextDataType;
							contxtGen.ContextData = contextData;
							contxtGen.EntityDataType = entityDataType;
							contxtGen.MappingNamespace = mappingGen.FullNamespace;
							contxtGen.MappingPostFix = mappingDataType.PostFix;
							contxtGen.Run();
						}
					}
                }
			
                if(dataType is RepoInterfaceDataType)
                {
					dataType.AdditionalNamespaces.Add("RepositoryEFDotnet.Core.Base");
					
                    var iRepoGen = new RepoInterfaceGenerator();
                    iRepoGen.Models = domain.Tables;
                    iRepoGen.DataType = dataType as RepoInterfaceDataType;
                    iRepoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iRepoGen.Run();
                }
			
                if(dataType is RepositoryDataType)
                {
                    dataType.AdditionalNamespaces.Add("RepositoryEFDotnet.Core.Base");

                    var iRepoGen = new RepositoryGenerator();
                    iRepoGen.Models = domain.Tables;
                    iRepoGen.DataType = dataType as RepositoryDataType;
                    iRepoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iRepoGen.EntityDataType = dataTypes.FirstOrDefault(o => o is EntityDataType) as EntityDataType;
                    iRepoGen.Run();
                }
			
                if(dataType is DtoDataType)
                {
                    var iDtoGen = new DtoGenerator();
                    iDtoGen.Models = domain.Tables;
                    iDtoGen.DataType = dataType as DtoDataType;
                    iDtoGen.DtoInterfaceType = dataTypes.FirstOrDefault(o => o is DtoInterfaceDataType) as DtoInterfaceDataType;
                    iDtoGen.Run();
                }
            }
			
			// Unit Test generation
			var unitTestGen = new BaseUnitTestGenerator();
			unitTestGen.Models = domain.Tables;
			unitTestGen.Run();
        }
}
    #>
