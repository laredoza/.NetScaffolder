<#+
public class ContextCoreTemplate : BaseTemplate 
{
	public ContextDataType DataType { get; set; }
	public ContextData ContextData { get; set; }
	public string EntityNamespace { get; set; }
	public string MappingNamespace { get; set; }
	public string MappingPostFix { get; set; }
    public IDriver Driver { get; set; }
	public List<Table> Models { get; set; }

	public override string TransformText()
	{
		//Debugger.Break();
		Header = new CopyrightHeader();
		Header.Filename = ContextData.ContextName;
#>

<#= Header.TransformText() #>

// *******************************************************************
//	GENERATED CODE. DOT NOT MODIFY MANUALLY AS CHANGES CAN BE LOST!!!
//	USE A PARTIAL CLASS INSTEAD
// *******************************************************************

<#+ foreach(var nameSpace in Driver.NameSpaces){ #>
using <#= nameSpace #>;
<#+ } #>
<#+ foreach(var nameSpace in DataType.AdditionalNamespaces){ #>
using <#= nameSpace #>;
<#+ } #>
using System.ComponentModel.DataAnnotations.Schema;
using <#= MappingNamespace #>;
using <#= EntityNamespace #>;

namespace <#= ContextData.TransformFullnamespace(DataType.BaseNamespace) #>.<#= Driver.ParentFolder #>
{
<#+ if(!string.IsNullOrEmpty(Driver.ContextAttribute)){ #>
    <#=Driver.ContextAttribute #>
<#+ } #>
	public partial class <#= string.Concat(Driver.Prefix, ContextData.ContextName) #> <#= ContextData.TransformInheritFrom #>
	{	
		#region CTOR

	    public <#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>(string connectionName)
	        : base(connectionName)
	    {
	    }

	    public <#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>(DbContextOptions<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>> options) 
			: base(options) 
		{
		}
		
		public <#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>()
<#+ if(!string.IsNullOrEmpty(ContextData.CustomConnectionName)){ #>
			: base("name=<#= ContextData.CustomConnectionName #>") 
<#+ } else #>
<#+ { #>
			: base() 
<#+ } #>
		{
		}
		
		#endregion
		
	    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
	    {
	        if (!string.IsNullOrEmpty(ConnectionName) && !optionsBuilder.IsConfigured)
	        {
<#+ if(Driver is EFCoreSqlServerDriver) { #>
				optionsBuilder.UseSqlServer(ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString);
<#+ }#>
<#+ if(Driver is EFCoreMySqlDriver) { #>
				optionsBuilder.UseMySql(ConfigurationManager.ConnectionStrings[ConnectionName].ConnectionString);
<#+ }#>
	        }
	    }
		
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
			
			#region Mappings
			
<#+ foreach(var table in this.Models){ #>
			modelBuilder.ApplyConfiguration(new <#= table.TableName #><#= MappingPostFix #>());
<#+ } #>

			#endregion
			
			#region Excluded Relationships
			
			// Exclude entities not part of this context
			
<#+ foreach(var rel in ContextData.ExcludedRelationships(Models)){ #>
			modelBuilder.Ignore<<#= rel.ReferencedTableName #>>();
<#+ } #>

			#endregion
        }
		
		#region Db Sets
		
<#+ foreach(var table in Models){ #>
		public virtual DbSet<<#= DataType.TransformModelName(table.TableName) #>> <#=DataType.TransformModelName(table.TableName) #> { get; set; }
<#+ } #>

		#endregion
		
		#region Setup
        
		protected override void SetupContext()
        {
            //Configuration.LazyLoadingEnabled = <#= Driver.DriverType.LazyLoadingEnabled.ToString().ToLower() #>;
            //Configuration.ProxyCreationEnabled = <#= Driver.DriverType.ProxyCreationEnabled.ToString().ToLower() #>;
            //Configuration.AutoDetectChangesEnabled = false;
			
<#+ if(Driver.DriverType.CreateDb){ #>
			//Database.SetInitializer(new CreateDatabaseIfNotExists<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>>());
			// Database.SetInitializer(new MigrateDatabaseToLatestVersion<<#= string.Concat(Driver.Prefix, ContextData.ContextName)  #>, Configuration>());
<#+ } #>
<#+ if(Driver.DriverType.LoggingEnabled){ #>
			//Database.Log = this.Log;
<#+ } #>
        }
		
		#endregion
	}
}
<#+
		return this.GenerationEnvironment.ToString();
	}
}
#>
